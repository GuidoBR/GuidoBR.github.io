{"version":3,"sources":["components/Button.jsx","components/Display.jsx","main/Calculator.jsx","serviceWorker.js","index.js"],"names":["props","onClick","e","click","label","className","operation","double","triple","value","initialState","displayValue","clearDisplay","values","current","Calculator","state","clearMemory","bind","setOperation","addDigit","this","setState","equals","currentOperation","n","includes","i","newValue","parseFloat","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.256c812b.chunk.js","sourcesContent":["import React from 'react'\nimport './Button.css'\n\nexport default props =>\n    <button \n        onClick={e => props.click && props.click(props.label)}\n        className={`\n            button\n            ${props.operation ? 'operation' : ''}\n            ${props.double ? 'double' : ''}\n            ${props.triple ? 'triple' : ''}\n        `}\n    >\n        {props.label}\n    </button>","import React from 'react'\nimport './Display.css'\n\nexport default props =>\n    <div className=\"display\">{props.value}</div>","import React, { Component } from 'react'\nimport './Calculator.css'\n\nimport Button from '../components/Button'\nimport Display from '../components/Display'\n\nconst initialState = {\n    displayValue: '0',\n    clearDisplay: false,\n    operation: null,\n    values: [0, 0],\n    current: 0\n}\n\nexport default class Calculator extends Component {\n    state = { ...initialState }\n\n    constructor(props) {\n        super(props);\n        this.clearMemory = this.clearMemory.bind(this);\n        this.setOperation = this.setOperation.bind(this);\n        this.addDigit = this.addDigit.bind(this);\n    }\n    clearMemory() {\n        this.setState({ ...initialState })\n    }\n\n    setOperation(operation) {\n        if (this.state.current === 0) {\n            this.setState({operation, current: 1, clearDisplay: true});\n        } else {\n            const equals = operation === '=';\n            const currentOperation = this.state.operation;\n\n            const values = [...this.state.values];\n            try {\n                switch (currentOperation) {\n                    case '+':\n                        values[0] = values[0] + values[1];\n                        break;\n                    case '-':\n                        values[0] = values[0] - values[1];\n                        break;\n                    case 'x':\n                        values[0] = values[0] * values[1];\n                        break;\n                    case '/':\n                        values[0] = values[0] / values[1];\n                        break;\n                }\n            } catch(e) {\n                values[0] = this.state.values[0];\n            }\n            values[1] = 0;\n\n            this.setState({\n                displayValue: values[0],\n                operation: equals ? null : operation,\n                current : equals ? 0 : 1,\n                clearDisplay: !equals,\n                values\n            })\n        }\n    }\n\n    addDigit(n) {\n        if (n === '.' && this.state.displayValue.includes('.'))\n            return\n\n        const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay\n        const currentValue = clearDisplay ? '' : this.state.displayValue;\n        const displayValue = currentValue + n;\n        this.setState({ displayValue, clearDisplay: false})\n\n        if (n !== '.') {\n            const i = this.state.current;\n            const newValue = parseFloat(displayValue);\n            const values = [...this.state.values];\n            values[i] = newValue;\n            this.setState({ values });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"calculator\">\n                <Display value={this.state.displayValue} />\n                <Button label=\"AC\" click={this.clearMemory} triple/>                \n                <Button label=\"/\" click={this.setOperation} operation />                \n                <Button label=\"7\" click={this.addDigit}/>                \n                <Button label=\"8\" click={this.addDigit}/>                \n                <Button label=\"9\" click={this.addDigit}/>\n                <Button label=\"x\" click={this.setOperation} operation />                \n                <Button label=\"4\" click={this.addDigit}/>                \n                <Button label=\"5\" click={this.addDigit}/>                \n                <Button label=\"6\" click={this.addDigit}/>                \n                <Button label=\"-\" click={this.setOperation} operation/>\n                <Button label=\"1\" click={this.addDigit}/>\n                <Button label=\"2\" click={this.addDigit}/>\n                <Button label=\"3\" click={this.addDigit}/>                \n                <Button label=\"+\" click={this.setOperation} operation/>\n                <Button label=\"0\" click={this.addDigit} double />                \n                <Button label=\".\" click={this.addDigit}/>                \n                <Button label=\"=\" click={this.setOperation} operation/>                \n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Calculator from './main/Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div>\n        <h1>Calculadora</h1>\n        <Calculator />\n    </div>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}