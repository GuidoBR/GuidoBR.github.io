{"version":3,"sources":["components/Player.jsx","components/SinglePodcast.jsx","components/Search.jsx","components/PodcastList.jsx","main/Podcast.jsx","serviceWorker.js","index.js"],"names":["props","className","selectedPodcast","Title","id","preload","controls","src","AudioUrl","type","Image","alt","width","Description","data-aos","image","href","podcastTitle","author","role","placeholder","onChange","handleDescriptionChange","onKeyUp","search","value","description","onClick","podcasts","map","podcast","SinglePodcast","substring","Author","key","Podcast","state","bind","getPodcasts","fetch","then","r","json","data","setState","episodes","this","e","target","query","undefined","filter","o","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39936856.chunk.js","sourcesContent":["import React from 'react'\nimport './Player.css'\n\nexport default props =>\n    <div className=\"container\">\n        <div className=\"row\">\n            <div className=\"col\">\n                <h2>{props.selectedPodcast.Title}</h2>\n\n                <div className=\"player\">\n                    <audio id=\"player2\" preload=\"none\" controls>\n                        <source src={props.selectedPodcast.AudioUrl} type=\"audio/mp3\" />\n                    </audio>\n                </div>\n\n                <div>\n                    <img src={props.selectedPodcast.Image} alt='' width=\"100%\" />\n                </div>\n            </div>\n\n            <div className=\"col\">\n                <p className=\"card-text\">{props.selectedPodcast.Description}</p>\n            </div>\n        </div>\n        \n\n    </div>","import React from 'react'\n\nexport default props =>\n    <div className=\"d-block d-md-flex podcast-entry bg-white mb-5\" data-aos=\"fade-up\">\n        <div className=\"image\"><img src={props.image} alt='' width=\"100%\" /></div>\n        <div className=\"text\">\n            <h3 className=\"font-weight-light\"><a href=\"/\">{props.podcastTitle}</a></h3>\n            <div className=\"text-white mb-3\"><span className=\"text-black-opacity-05\"><small>por {props.author} <span className=\"sep\">/</span> 16 September 2017 <span className=\"sep\">/</span> 1:30:20</small></span></div>\n            <p className=\"mb-4\">{props.Description}</p>\n\n            <div className=\"player\">\n                <audio id=\"player2\" preload=\"none\" controls>\n                    <source src={props.AudioUrl} type=\"audio/mp3\" />\n                </audio>\n            </div>\n        </div>\n    </div>","import React from 'react'\nimport './Search.css'\n\nexport default props => (\n    <div role=\"form\" className=\"searchForm input-group col-md-12\">\n        <input \n            id=\"description\" \n            className=\"form-control\" \n            placeholder=\"Busque um episÃ³dio\"\n            onChange={props.handleDescriptionChange}\n            onKeyUp={props.search}\n            value={props.description}\n        ></input>\n        \n      <span className=\"input-group-append\">\n        <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={() => props.search(props.description)}>\n            <i className=\"fa fa-search\"></i>\n        </button>\n      </span>\n    </div>\n)","import React from 'react'\nimport './PodcastList.css'\nimport SinglePodcast from './SinglePodcast'\nimport Search from './Search'\n\nexport default props => (\n<div className=\"site-section bg-light\">\n        <div className=\"container\">\n            <Search search={props.search} description={props.description} handleDescriptionChange={props.handleDescriptionChange} />\n\n            <div className=\"row mb-5\" data-aos=\"fade-up\">\n                <div className=\"col-md-12 text-center\">\n                </div>\n            </div>\n            \n            {\n                props.podcasts.map(\n                    podcast => <SinglePodcast \n                        AudioUrl={podcast.AudioUrl} \n                        podcastTitle={podcast.Title} \n                        image={podcast.Image} \n                        description={podcast.Description.substring(0, 240) + \"...\"} \n                        author={podcast.Author}\n                        key={podcast.id} />\n                )\n            }\n        </div>    \n    </div>\n)","import React, { Component } from 'react'\n\nimport Player from '../components/Player'\nimport PodcastList from '../components/PodcastList'\n\nimport './style.css'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'font-awesome/css/font-awesome.min.css';\n\nexport default class Podcast extends Component {\n    state = {\n        podcasts: [],\n        description: '',\n        selectedPodcast: {}\n    };\n\n    constructor() {\n        super();\n        this.search = this.search.bind(this);\n        this.getPodcasts = this.getPodcasts.bind(this);\n        this.handleDescriptionChange = this.handleDescriptionChange.bind(this);\n    }\n    \n    getPodcasts() {\n        fetch('data/Podcasts.json')\n            .then((r) => r.json())\n            .then((data) =>{\n                this.setState({podcasts: data.episodes, selectedPodcast: data.episodes[0]});\n            })\n    }\n\n    componentDidMount() {\n        this.getPodcasts();\n    }\n\n    handleDescriptionChange(e) {\n        this.setState({description: e.target.value })\n    }\n\n    search() {\n        var query = this.state.description;\n        if (query !== undefined && query !== '') {\n            this.setState({\n                podcasts: this.state.podcasts.filter(o => o.Title.includes(query))\n            })\n        } else {\n            this.getPodcasts()\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"podcast-app\">\n                <Player selectedPodcast={this.state.selectedPodcast} />\n                <PodcastList\n                    podcasts={this.state.podcasts}\n                    search={this.search}\n                    handleDescriptionChange={this.handleDescriptionChange}\n                    description={this.state.description} />\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Podcast from './main/Podcast';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Podcast />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}